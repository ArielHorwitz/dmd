#! /bin/bash

USAGE_TEXT="Usage: install [OPTIONS]...

Installation:
  -u, --update
      Install and update system and dependencies.
  -s, --soft-update
      Install and update dependencies (overwrites -u).
  -v, --verbose
      Show more verbose output.

Info:
  -h, --help
      Print this help and exit.
"
SHORT=u,s,v,h
LONG=update,soft-update,verbose,help
OPTS=$(getopt --name install --options $SHORT --longoptions $LONG -- "$@")

VERBOSE=""
while :
do
    [[ -z $1 ]] && break
    case "$1" in
        -s | --soft-update ) shift
            [[ $DO_UPDATE -lt 2 ]] && DO_UPDATE=2
            continue
            ;;
        -u | --update ) shift
            [[ $DO_UPDATE -lt 1 ]] && DO_UPDATE=1
            continue
            ;;
        -v | --verbose ) shift
            VERBOSE="--verbose"
            continue
            ;;
        -h | --help)
            echo -n "$USAGE_TEXT"
            exit 2
            ;;
        *)
            echo "Unexpected option: $1"
            echo -n "$USAGE_TEXT"
            exit 1
            ;;
    esac
done

set -e

SRCDIR=$(pathparent -r $BASH_SOURCE $PWD)
DATADIR=$SRCDIR/data
BINDIR=/usr/bin/iukbtw
CONFDIR=/etc/iukbtw

[[ $EUID -eq 0 ]] && echo "Do not run $0 as root." && exit 1
[[ ! -d $SRCDIR ]] && echo "Failed to resolve source directory: $SRCDIR" >&2 && exit 1
[[ ! -d $DATADIR ]] && echo "Missing data directory: $DATADIR" >&2 && exit 1

title () { printf "\n█▓▒░ $1 ░▒▓█\n" ; }
subtitle () { printf "\n░▒▓█ $1\n" ; }


title "Installing iukbtw"

if [[ $DO_UPDATE -gt 0 ]]; then
    if [[ $DO_UPDATE -le 1 ]]; then
        subtitle "Updating System"
        VVV=`[[ -n $VERBOSE ]] && echo "--verbose" || echo "-q"`
        sudo pacman -Syu --noconfirm $VVV || sudo pacman -Syuq --noconfirm;
    fi
    if [[ $DO_UPDATE -le 2 ]]; then
        subtitle "Installing dependencies"
        VVV=`[[ -n $VERBOSE ]] && echo "--verbose" || echo "-q"`
        # EEE=`[[ -n $VERBOSE ]] && echo "" || echo "&2>/dev/null"`
        yay $VERBOSE -S --needed --noconfirm $VVV - < $DATADIR/dependencies.txt
    fi
fi


subtitle "Copying binaries"
recreatedir () {
    [[ -d $1 ]] && sudo rm -rf $VERBOSE $1
    sudo mkdir --parents $VERBOSE $1
}
recreatedir $BINDIR
recreatedir $CONFDIR

# Copy non-user data
sudo cp $VERBOSE --recursive $SRCDIR/bin/* $BINDIR
sudo cp $VERBOSE --recursive $SRCDIR/etc/* $CONFDIR

# Remove binary file extensions and make executable
sudo chmod $VERBOSE +x --recursive $BINDIR
for filename in $BINDIR/* ; do
    newname=$(echo $filename | rev | cut -d. -f2- | rev)
    [[ $filename != $newname ]] && sudo mv $filename $newname
done

# Configure
subtitle "Configuring $USER @ $HOME"
# Add sudoer rules -- check with visudo before copy!
sudo groupadd -f iukbtw && sudo usermod -aG iukbtw $USER
if [[ $(visudo -csf $DATADIR/sudoers | grep "parsed OK") = "" ]] ; then
    echo "Failed check on sudoer file"
    exit 1
else
    sudo cp $VERBOSE --force $DATADIR/sudoers "/etc/sudoers.d/50-iukbtw"
fi
# Add udev rules for KMonad
# (https://github.com/kmonad/kmonad/blob/master/doc/faq.md#q-how-do-i-get-uinput-permissions)
# (https://github.com/kmonad/kmonad/issues/160#issuecomment-766121884)
sudo groupadd -f uinput
sudo usermod -aG uinput $USER
sudo usermod -aG input $USER
sudo cp $VERBOSE $DATADIR/uinput.conf /etc/modules-load.d/
sudo cp $VERBOSE $DATADIR/90-uinput.rules /etc/udev/rules.d/

# Copy dotfiles
subtitle "Copying user home skeleton"
cd $SRCDIR/home && cp $VERBOSE --recursive --parents . $HOME && cd $SRCDIR


# Completion tasks
subtitle "Done."
[[
    -z $(groups | grep input) ||
    -z $(groups | grep uinput) ||
    -z $(groups | grep iukbtw)
]] && echo "Please login again for group config to apply."
[[ -z $(echo $PATH | grep $BINDIR) ]] && echo "Please login again for PATH to apply"

